
'use client';

import { useState, useEffect } from 'react';

export default function VulnerabilityList({ vulnerabilities, onUpdateData }) {
  const [detectedVulnerabilities, setDetectedVulnerabilities] = useState([]);
  const [scanning, setScanning] = useState(false);

  useEffect(() => {
    // Initialize with sample vulnerabilities
    const sampleVulnerabilities = [
      {
        id: 'unencrypted-emails',
        title: 'Unencrypted Email Communications',
        description: 'Email communications are not encrypted, potentially exposing sensitive information',
        severity: 'High',
        category: 'Data Protection',
        impact: 'Data breach, HIPAA violation',
        likelihood: 'Medium',
        riskScore: 7.5,
        status: 'Open',
        detectedDate: '2024-01-15',
        affectedAssets: ['Email Server', 'Client Communications']
      },
      {
        id: 'weak-passwords',
        title: 'Weak Password Policy',
        description: 'Current password requirements are insufficient for security standards',
        severity: 'Medium',
        category: 'Access Control',
        impact: 'Unauthorized access',
        likelihood: 'High',
        riskScore: 6.0,
        status: 'Open',
        detectedDate: '2024-01-10',
        affectedAssets: ['User Accounts', 'Admin Portals']
      },
      {
        id: 'outdated-software',
        title: 'Outdated Software Components',
        description: 'Several software components are running outdated versions with known vulnerabilities',
        severity: 'High',
        category: 'System Security',
        impact: 'System compromise, data loss',
        likelihood: 'Medium',
        riskScore: 8.0,
        status: 'In Progress',
        detectedDate: '2024-01-08',
        affectedAssets: ['Web Server', 'Database', 'Third-party Libraries']
      },
      {
        id: 'missing-mfa',
        title: 'Missing Multi-Factor Authentication',
        description: 'Critical systems lack multi-factor authentication protection',
        severity: 'High',
        category: 'Authentication',
        impact: 'Account takeover, unauthorized access',
        likelihood: 'Medium',
        riskScore: 7.0,
        status: 'Open',
        detectedDate: '2024-01-12',
        affectedAssets: ['Admin Panel', 'User Portal', 'API Access']
      },
      {
        id: 'data-backup',
        title: 'Inadequate Data Backup Strategy',
        description: 'Backup procedures are inconsistent and lack proper testing',
        severity: 'Medium',
        category: 'Business Continuity',
        impact: 'Data loss, business disruption',
        likelihood: 'Low',
        riskScore: 4.5,
        status: 'Open',
        detectedDate: '2024-01-14',
        affectedAssets: ['Database', 'File Storage', 'Configuration Files']
      }
    ];

    setDetectedVulnerabilities(sampleVulnerabilities);
  }, []);

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
        return 'bg-green-100 text-green-800 border-green-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status) => {
    switch (status.toLowerCase()) {
      case 'open':
        return 'bg-red-100 text-red-800';
      case 'in progress':
        return 'bg-yellow-100 text-yellow-800';
      case 'resolved':
        return 'bg-green-100 text-green-800';
      case 'mitigated':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const handleScan = async () => {
    setScanning(true);
    // Simulate vulnerability scan
    setTimeout(() => {
      setScanning(false);
      // Add a new vulnerability
      const newVuln = {
        id: 'new-scan-' + Date.now(),
        title: 'Newly Detected Vulnerability',
        description: 'Recently discovered security issue requiring attention',
        severity: 'Medium',
        category: 'Network Security',
        impact: 'Potential data exposure',
        likelihood: 'Low',
        riskScore: 5.0,
        status: 'Open',
        detectedDate: new Date().toISOString().split('T')[0],
        affectedAssets: ['Network Infrastructure']
      };
      setDetectedVulnerabilities(prev => [newVuln, ...prev]);
    }, 3000);
  };

  const handleStatusChange = (vulnId, newStatus) => {
    setDetectedVulnerabilities(prev =>
      prev.map(vuln =>
        vuln.id === vulnId ? { ...vuln, status: newStatus } : vuln
      )
    );
  };

  const filteredVulnerabilities = detectedVulnerabilities.filter(vuln => 
    vuln.status.toLowerCase() !== 'resolved'
  );

  return (
    <div className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Security Vulnerabilities</h2>
          <p className="text-gray-600">Identified security risks and their assessment</p>
        </div>
        <button
          onClick={handleScan}
          disabled={scanning}
          className="bg-purple-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-purple-700 disabled:opacity-50 flex items-center space-x-2"
        >
          {scanning ? (
            <>
              <svg className="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span>Scanning...</span>
            </>
          ) : (
            <>
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <span>Run Scan</span>
            </>
          )}
        </button>
      </div>

      {/* Summary Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="text-2xl font-bold text-red-600">
            {filteredVulnerabilities.filter(v => v.severity === 'High' || v.severity === 'Critical').length}
          </div>
          <div className="text-sm text-red-800">Critical/High Risk</div>
        </div>
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="text-2xl font-bold text-yellow-600">
            {filteredVulnerabilities.filter(v => v.severity === 'Medium').length}
          </div>
          <div className="text-sm text-yellow-800">Medium Risk</div>
        </div>
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="text-2xl font-bold text-green-600">
            {filteredVulnerabilities.filter(v => v.severity === 'Low').length}
          </div>
          <div className="text-sm text-green-800">Low Risk</div>
        </div>
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="text-2xl font-bold text-blue-600">
            {(filteredVulnerabilities.reduce((sum, v) => sum + v.riskScore, 0) / filteredVulnerabilities.length || 0).toFixed(1)}
          </div>
          <div className="text-sm text-blue-800">Average Risk Score</div>
        </div>
      </div>

      {/* Vulnerability List */}
      <div className="space-y-4">
        {filteredVulnerabilities.map((vulnerability) => (
          <div 
            key={vulnerability.id}
            className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow bg-white"
          >
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center space-x-3 mb-2">
                  <h3 className="text-lg font-semibold text-gray-900">{vulnerability.title}</h3>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vulnerability.severity)}`}>
                    {vulnerability.severity} Risk
                  </span>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(vulnerability.status)}`}>
                    {vulnerability.status}
                  </span>
                </div>
                <p className="text-gray-600 mb-3">{vulnerability.description}</p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-700">Category:</span>
                    <div className="text-gray-600">{vulnerability.category}</div>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Risk Score:</span>
                    <div className="text-gray-600">{vulnerability.riskScore}/10</div>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Impact:</span>
                    <div className="text-gray-600">{vulnerability.impact}</div>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Detected:</span>
                    <div className="text-gray-600">{new Date(vulnerability.detectedDate).toLocaleDateString()}</div>
                  </div>
                </div>

                {vulnerability.affectedAssets && (
                  <div className="mt-3">
                    <span className="font-medium text-gray-700 text-sm">Affected Assets:</span>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {vulnerability.affectedAssets.map((asset, index) => (
                        <span 
                          key={index}
                          className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs"
                        >
                          {asset}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <div className="ml-4 flex flex-col space-y-2">
                <select
                  value={vulnerability.status}
                  onChange={(e) => handleStatusChange(vulnerability.id, e.target.value)}
                  className="text-sm border border-gray-300 rounded px-2 py-1"
                >
                  <option value="Open">Open</option>
                  <option value="In Progress">In Progress</option>
                  <option value="Mitigated">Mitigated</option>
                  <option value="Resolved">Resolved</option>
                </select>
                
                <button className="text-sm text-purple-600 hover:text-purple-800 font-medium">
                  View Details
                </button>
              </div>
            </div>

            {/* Risk Meter */}
            <div className="mt-4">
              <div className="flex items-center space-x-2 mb-1">
                <span className="text-sm font-medium text-gray-700">Risk Level:</span>
                <span className="text-sm text-gray-600">{vulnerability.riskScore}/10</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className={`h-2 rounded-full ${
                    vulnerability.riskScore >= 7 ? 'bg-red-500' :
                    vulnerability.riskScore >= 5 ? 'bg-yellow-500' :
                    'bg-green-500'
                  }`}
                  style={{ width: `${(vulnerability.riskScore / 10) * 100}%` }}
                />
              </div>
            </div>
          </div>
        ))}

        {filteredVulnerabilities.length === 0 && (
          <div className="text-center py-12">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h3 className="mt-2 text-sm font-medium text-gray-900">No vulnerabilities found</h3>
            <p className="mt-1 text-sm text-gray-500">Great! No security vulnerabilities detected.</p>
          </div>
        )}
      </div>
    </div>
  );
}
