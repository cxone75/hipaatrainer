
'use client';

import { useState } from 'react';

export default function VulnerabilityList({ vulnerabilities, onUpdateData }) {
  const [filter, setFilter] = useState('all');
  const [sortBy, setSortBy] = useState('riskScore');
  const [searchTerm, setSearchTerm] = useState('');

  const mockVulnerabilities = [
    {
      id: 'unencrypted-data',
      title: 'Unencrypted Data Transmission',
      description: 'PHI transmitted over unencrypted channels in legacy systems',
      severity: 'Critical',
      category: 'Encryption',
      impact: 'Data breach, HIPAA violation',
      likelihood: 'High',
      riskScore: 9.5,
      status: 'Open',
      detectedDate: '2024-01-10',
      affectedAssets: ['Legacy System A', 'Email Server', 'File Transfer']
    },
    {
      id: 'weak-passwords',
      title: 'Weak Password Policies',
      description: 'Current password requirements do not meet HIPAA standards',
      severity: 'High',
      category: 'Authentication',
      impact: 'Unauthorized access to PHI',
      likelihood: 'Medium',
      riskScore: 8.5,
      status: 'Open',
      detectedDate: '2024-01-08',
      affectedAssets: ['User Accounts', 'Admin Portal', 'Database Access']
    },
    {
      id: 'outdated-software',
      title: 'Outdated Software Components',
      description: 'Multiple systems running unsupported software versions',
      severity: 'High',
      category: 'Patch Management',
      impact: 'Security vulnerabilities, compliance issues',
      likelihood: 'High',
      riskScore: 8.0,
      status: 'In Progress',
      detectedDate: '2024-01-05',
      affectedAssets: ['Web Server', 'Database', 'Third-party Libraries']
    },
    {
      id: 'missing-mfa',
      title: 'Missing Multi-Factor Authentication',
      description: 'Critical systems lack multi-factor authentication protection',
      severity: 'High',
      category: 'Authentication',
      impact: 'Account takeover, unauthorized access',
      likelihood: 'Medium',
      riskScore: 7.0,
      status: 'Open',
      detectedDate: '2024-01-12',
      affectedAssets: ['Admin Panel', 'User Portal', 'API Access']
    },
    {
      id: 'data-backup',
      title: 'Inadequate Data Backup Strategy',
      description: 'Backup procedures are inconsistent and lack proper testing',
      severity: 'Medium',
      category: 'Business Continuity',
      impact: 'Data loss, business disruption',
      likelihood: 'Low',
      riskScore: 4.5,
      status: 'Open',
      detectedDate: '2024-01-14',
      affectedAssets: ['Database', 'File Storage', 'Configuration Files']
    }
  ];

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'Critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'High': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'Medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Open': return 'bg-red-100 text-red-800';
      case 'In Progress': return 'bg-blue-100 text-blue-800';
      case 'Resolved': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredVulnerabilities = mockVulnerabilities
    .filter(vuln => {
      if (filter === 'all') return true;
      return vuln.severity.toLowerCase() === filter.toLowerCase();
    })
    .filter(vuln => 
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.description.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      if (sortBy === 'riskScore') return b.riskScore - a.riskScore;
      if (sortBy === 'detectedDate') return new Date(b.detectedDate) - new Date(a.detectedDate);
      return a.title.localeCompare(b.title);
    });

  return (
    <div className="p-6">
      <div className="mb-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Vulnerability Assessment</h2>
        <p className="text-gray-600">Identified security vulnerabilities and their risk assessments</p>
      </div>

      {/* Filters and Search */}
      <div className="mb-6 flex flex-col sm:flex-row gap-4">
        <div className="flex-1">
          <input
            type="text"
            placeholder="Search vulnerabilities..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
          />
        </div>
        <div className="flex gap-3">
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
          >
            <option value="all">All Severities</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
          >
            <option value="riskScore">Risk Score</option>
            <option value="detectedDate">Date Detected</option>
            <option value="title">Title</option>
          </select>
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="text-2xl font-bold text-red-600">
            {mockVulnerabilities.filter(v => v.severity === 'Critical').length}
          </div>
          <div className="text-sm text-red-800">Critical</div>
        </div>
        <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
          <div className="text-2xl font-bold text-orange-600">
            {mockVulnerabilities.filter(v => v.severity === 'High').length}
          </div>
          <div className="text-sm text-orange-800">High</div>
        </div>
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="text-2xl font-bold text-yellow-600">
            {mockVulnerabilities.filter(v => v.severity === 'Medium').length}
          </div>
          <div className="text-sm text-yellow-800">Medium</div>
        </div>
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="text-2xl font-bold text-green-600">
            {mockVulnerabilities.filter(v => v.severity === 'Low').length}
          </div>
          <div className="text-sm text-green-800">Low</div>
        </div>
      </div>

      {/* Vulnerabilities List */}
      <div className="space-y-4">
        {filteredVulnerabilities.map((vulnerability) => (
          <div key={vulnerability.id} className="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">{vulnerability.title}</h3>
                <p className="text-gray-600 mb-3">{vulnerability.description}</p>
              </div>
              <div className="flex flex-col items-end space-y-2">
                <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vulnerability.severity)}`}>
                  {vulnerability.severity}
                </span>
                <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(vulnerability.status)}`}>
                  {vulnerability.status}
                </span>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <span className="text-sm font-medium text-gray-700">Risk Score:</span>
                <div className="flex items-center mt-1">
                  <div className="w-full bg-gray-200 rounded-full h-2 mr-2">
                    <div 
                      className={`h-2 rounded-full ${
                        vulnerability.riskScore >= 8 ? 'bg-red-500' :
                        vulnerability.riskScore >= 6 ? 'bg-orange-500' :
                        vulnerability.riskScore >= 4 ? 'bg-yellow-500' : 'bg-green-500'
                      }`}
                      style={{ width: `${vulnerability.riskScore * 10}%` }}
                    ></div>
                  </div>
                  <span className="text-sm font-medium">{vulnerability.riskScore}/10</span>
                </div>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-700">Impact:</span>
                <p className="text-sm text-gray-600 mt-1">{vulnerability.impact}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-700">Likelihood:</span>
                <p className="text-sm text-gray-600 mt-1">{vulnerability.likelihood}</p>
              </div>
            </div>

            <div className="mb-4">
              <span className="text-sm font-medium text-gray-700">Affected Assets:</span>
              <div className="flex flex-wrap gap-2 mt-1">
                {vulnerability.affectedAssets.map((asset, index) => (
                  <span key={index} className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs">
                    {asset}
                  </span>
                ))}
              </div>
            </div>

            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-500">
                Detected: {new Date(vulnerability.detectedDate).toLocaleDateString()}
              </span>
              <div className="flex space-x-2">
                <button className="px-3 py-1 text-sm bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors">
                  View Details
                </button>
                <button className="px-3 py-1 text-sm border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition-colors">
                  Add to Plan
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredVulnerabilities.length === 0 && (
        <div className="text-center py-8">
          <div className="text-gray-500 mb-2">No vulnerabilities found</div>
          <p className="text-sm text-gray-400">Try adjusting your search or filter criteria</p>
        </div>
      )}

      {/* HIPAA Compliance Impact */}
      <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">HIPAA Compliance Impact</h3>
        <div className="space-y-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <h4 className="font-medium text-red-800 mb-2">Administrative Safeguards</h4>
            <p className="text-red-700 text-sm">
              Weak password policies and missing MFA may violate HIPAA's access control requirements (§164.308(a)(4)).
            </p>
          </div>
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-medium text-yellow-800 mb-2">Physical Safeguards</h4>
            <p className="text-yellow-700 text-sm">
              Inadequate backup strategies may impact business continuity and data recovery requirements (§164.310(d)).
            </p>
          </div>
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
            <h4 className="font-medium text-orange-800 mb-2">Technical Safeguards</h4>
            <p className="text-orange-700 text-sm">
              Unencrypted communications and outdated software violate encryption and system integrity requirements (§164.312).
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
